//ENCRIPTACION Blowfish
#include <iostream>	//LIBRERIA QUE PERMITE LA ENTRADA Y SALIDA DE DATOS
#include<fstream>	//LIBRERIA QUE PERMITE EL MANEJO DE FICHEROS

using namespace std;	//IMPLEMENTACION DEL ESPACION DE NOMBRES ESTANDAR

int main()
{
	char text;				//VARIABLE PARA ALMACENAR EL CARACTER QUE SE ESTA LEYENDO DE EL ARCHIVO, ESTE MISMO CARACTER ESEL QUE SE ENCRIPTARA
	char encript = '';		//CLAVE DE ENCRIPTACION/DESENCRIPTACION
	
	cout<<"1)Encriptar"<<endl<<"2)Desencriptar"<<endl;	//PREGUNTA SI SE QUIERE ENCRPTAR O DESENCRIPTAR
	
	int opc;	//ALMACENA LA OPCION ELEJIDA (ENCRIPTAR O DESENCRIPTAR)
	cin>>opc;
	
	if(opc==1)	//SI ELIJE ENCRIPTAR
	{
		ifstream original("Original.txt");	//ABRE UN ARCHIVO txt Y LO DECLARA COMO ARCHIVO DE LECTURA PARA OBTENER EL TEXTO A ENCRIPTAR
		ofstream encriptado("Encriptado.txt");	//CREA UN ARCHIVO txt Y LO DECLARA COMO ARCHIVO DE ESCRITURA PARA ESCRIBIR EL TEXTO ENCRIPTADO
		
		if(original.fail())	//SI FALLA LA APERTURA DEL ARCHIVO DE LECTURA SE INDICA QUE NO EXISTE
		{
			cout<<"NO EXISTE EL ARCHIVO Original.txt";
			system("pause");
			return 0;
		}
			
		original.get(text);	//OBTIENE UN CARACTER DEL ARCHIVO DE LECTURA Y LO ALMACENA EN LA VARIABLE text
		
		while(!original.eof())	//MIENTRAS NO SE LLEGE AL FINAL DEL CONTENIDO
		{
			text ^= encript;	//APLICA EL OPERADOR LOGICO XOR ENTRE CARACTER OBTENIDO Y LA CLAVE DE ENCRIPTACION Y EL RESULTADO LO ALMACENA DE NUEVO EN LA VARIABLE text
			encriptado<<text;	//ESCRIBE EL CARACTER ENCRIPTADO EN EL ARCHIVO DE ESCRITURA
			original.get(text);	////OBTIENE EL SIGUIENTE CARACTER DEL ARCHIVO DE LECTURA Y LO ALMACENA EN LA VARIABLE text
		}
		
		original.close();	//CIERRA EL ARCHIVO DE LECTURA
		encriptado.close();	//CIERRA EL ARCHIVO DE ESCRITURA (NESESARIO PARA QUE SE GUARDEN LOS CAMBIOS)
	}

	else if(opc==2)	//SI ELIJE DESENCRIPTAR
	{
		ifstream leerencriptado("Encriptado.txt");	//ABRE UN ARCHIVO txt Y LO DECLARA COMO ARCHIVO DE LECTURA PARA OBTENER EL TEXTO A DESENCRIPTAR
		ofstream desencriptado("Desencriptado.txt");	//CREA UN ARCHIVO txt Y LO DECLARA COMO ARCHIVO DE ESCRITURA PARA ESCRIBIR EL TEXTO DESENCRIPTADO
		
		if(leerencriptado.fail())	//SI FALLA LA APERTURA DEL ARCHIVO DE LECTURA SE INDICA QUE NO EXISTE
		{
			cout<<"NO EXISTE EL ARCHIVO Encriptado.txt";
			system("pause");
			return 0;
		}
		
		leerencriptado.get(text);	//OBTIENE UN CARACTER DEL ARCHIVO DE LECTURA Y LO ALMACENA EN LA VARIABLE text
		
		while(!leerencriptado.eof()) //MIENTRAS NO SE LLEGE AL FINAL DEL CONTENIDO
		{
			text ^= encript;	//APLICA EL OPERADOR LOGICO XOR ENTRE CARACTER OBTENIDO Y LA CLAVE DE DESENCRIPTACION
			desencriptado<<text;	//ESCRIBE EL CARACTER DESENCRIPTADO EN EL ARCHIVO DE ESCRITURA
			leerencriptado.get(text);	////OBTIENE EL SIGUIENTE CARACTER DEL ARCHIVO DE LECTURA Y LO ALMACENA EN LA VARIABLE text
		}
		
		leerencriptado.close();	//CIERRA EL ARCHIVO DE LECTURA
		desencriptado.close();	//CIERRA EL ARCHIVO DE ESCRITURA (NESESARIO PARA QUE SE GUARDEN LOS CAMBIOS)
	}
	
	system("pause");
	return 0;
}
